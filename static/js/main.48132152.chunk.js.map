{"version":3,"sources":["FoodItemList.js","EditFoodItemForm.js","AddFoodItemForm.js","App.js","serviceWorker.js","index.js"],"names":["FoodItemList","props","Container","Table","bordered","hover","size","variant","foodItems","length","map","foodItem","key","id","food","cost","className","onClick","editFoodItem","deleteFoodItem","boughtFoodItem","status","colSpan","EditFoodItemForm","type","name","value","onChange","handleInputChange","updateFoodItem","setEditing","AddFoodItemForm","onSubmit","addFoodItem","App","state","userId","editing","event","preventDefault","target","setState","filter","item","window","location","reload","currFood","updatedCurrFood","Object","assign","index","footItem","updatedFood","updatedCost","updatedFoodItem","this","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48132152.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Table, Container } from 'react-bootstrap';\r\n\r\nconst FoodItemList = (props) => (\r\n  <Container>\r\n    <Table bordered hover size=\"sm\" variant=\"dark\">\r\n      <thead>\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>Food</th>\r\n          <th>Cost</th>\r\n          <th>Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {\r\n          props.foodItems.length > 0 ? (\r\n            props.foodItems.map((foodItem) => (\r\n                <tr key={foodItem.id}>\r\n                  <td>{ foodItem.id }</td>\r\n                  <td>{ foodItem.food }</td>\r\n                  <td>{ foodItem.cost }</td>\r\n                  <td>\r\n                    <button className=\"btn btn-primary ml-2\" onClick={() => props.editFoodItem(foodItem)}> Edit </button> \r\n                    <button className=\"btn btn-danger ml-2\" onClick={() => props.deleteFoodItem(foodItem.id)}> Delete </button> \r\n                    <button className=\"btn btn-info ml-2\" onClick={() => props.boughtFoodItem(foodItem)}> \r\n                      { foodItem.status ? \"bought\" : \"pending\" }\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              )\r\n            )\r\n          ) : (\r\n            <tr>\r\n              <td colSpan={4}>No food, Sorry!!</td>\r\n            </tr>\r\n          )\r\n        }\r\n      </tbody>\r\n    </Table>\r\n  </Container>\r\n);\r\n\r\nexport default FoodItemList;","import React from 'react';\r\n\r\nconst EditFoodItemForm = (props) => (\r\n  <form className=\"col-sm-4\">\r\n    <div>\r\n      <label className=\"text-white\">Food Name</label>\r\n      <input type=\"text\" name=\"food\" value={props.food} onChange={props.handleInputChange} />\r\n    </div>\r\n    <div>\r\n      <label className=\"text-white\">Food Cost</label>\r\n      <input type=\"number\" name=\"cost\" value={props.cost} onChange={props.handleInputChange} />\r\n    </div>\r\n    <button className=\"btn btn-custom btn-primary ml-2\" onClick={ props.updateFoodItem }>Update</button>\r\n    <button className=\"btn btn-custom btn-danger ml-2\" onClick={() => props.setEditing(false)}>Cancel</button>\r\n  </form>\r\n);\r\n\r\nexport default EditFoodItemForm;","import React from 'react';\r\n\r\nconst AddFoodItemForm = (props) => (\r\n  <form onSubmit={ props.addFoodItem } className=\"col-sm-4\">\r\n    <div>\r\n      <label className=\"text-white\">Food Name</label>\r\n      <input type=\"text\" name=\"food\" value={props.food} onChange={props.handleInputChange} />\r\n    </div>\r\n    <div>\r\n      <label className=\"text-white\">Food Cost</label>\r\n      <input type=\"number\" name=\"cost\" value={props.cost} onChange={props.handleInputChange} />\r\n    </div>\r\n    <button className=\"btn btn-custom btn-primary ml-2\">Add item</button>\r\n  </form>\r\n);\r\n\r\nexport default AddFoodItemForm;","import React, { Component } from 'react';\nimport './App.css';\nimport FoodItemList from './FoodItemList';\nimport EditFoodItemForm from './EditFoodItemForm';\nimport AddFoodItemForm from './AddFoodItemForm';\n\nclass App extends Component {\n  \n  state = {\n    id: null,\n    userId: 1,\n    food: '',\n    cost: '',\n    status: false,\n    foodItem: {},\n    foodItems: [],\n    editing: false\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  addFoodItem = (event) => {\n    event.preventDefault();\n    if(!this.state.food) return;\n    const foodItem = {\n      id: this.state.foodItems.length + 1,\n      userId: this.state.userId,\n      food: this.state.food,\n      cost: this.state.cost,\n      status: this.state.status\n    };\n\n    this.setState({\n      food: '',\n      cost: '',\n      foodItem: foodItem,\n      foodItems: [...this.state.foodItems, foodItem]\n    });\n  }\n\n  deleteFoodItem = (id) => {\n    const foodItems = this.state.foodItems.filter( item => item.id !== id);\n    this.setState({ foodItems: foodItems });\n    if(this.state.editing === true) {\n      window.location.reload();\n    }\n  }\n\n  boughtFoodItem = (currFood) => {\n    const updatedCurrFood = Object.assign({}, currFood, { status: true });\n    const foodItems = this.state.foodItems.map((foodItem, index) => (\n      foodItem.id === currFood.id ? updatedCurrFood : foodItem\n    ));\n\n    this.setState({ foodItems: foodItems });\n  }\n\n  editFoodItem = (foodItem) => {\n    this.setEditing(true);\n    this.setState({\n      food: foodItem.food,\n      cost: foodItem.cost,\n      footItem: foodItem\n    });\n  }\n\n  setEditing = (value) => {\n    if(typeof value !== 'boolean') { throw 'This must be a boolean value' };\n    this.setState({\n      editing: value\n    });\n  }\n\n  updateFoodItem = (event) => {\n    event.preventDefault();\n    const updatedFood = this.state.food;\n    const updatedCost = this.state.cost;\n    const updatedFoodItem = Object.assign({}, this.state.foodItem, { food: updatedFood, cost: updatedCost });\n    const foodItems = this.state.foodItems.map((foodItem) => (\n      foodItem.id === this.state.foodItem.id ? updatedFoodItem : foodItem\n    ));\n    this.setState({\n      food: '',\n      cost: '', \n      foodItems: foodItems \n    });\n  }\n\n  render() {\n    const { cost, food, foodItems, editing } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"row App-main\">\n          <FoodItemList \n            foodItems={foodItems}\n            deleteFoodItem={this.deleteFoodItem}\n            boughtFoodItem={this.boughtFoodItem}\n            editFoodItem={this.editFoodItem}\n          />\n        </div>\n\n        <div className=\"row App-main\">\n          {\n            editing ? (\n              <EditFoodItemForm \n                food={food}\n                cost={cost}\n                handleInputChange={this.handleInputChange}\n                updateFoodItem={this.updateFoodItem}\n                setEditing={this.setEditing}\n              />\n            ) : (\n              <AddFoodItemForm \n                food={food}\n                cost={cost}\n                handleInputChange={this.handleInputChange}\n                addFoodItem={this.addFoodItem}\n              />\n            )\n          }\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}